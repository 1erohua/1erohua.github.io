<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1、两数之和</title>
    <link href="/2025/03/07/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2025/03/07/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、两数之和</h2><p><img src="https://picgo-1326755989.cos.ap-nanjing.myqcloud.com/pic/image-20250307233758271.png" alt="image-20250307233758271"></p><p>最先能想到的就是遍历循环，先定下数组中的一个值，再依次遍历其他元素进行 <code>target-nums[i]</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.<span class="hljs-built_in">size</span>(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[j] == target - nums[i]) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;i, j&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>用自己的clion写就是舒服</p></blockquote><p>后面发现，为什么我的用时会这么慢：</p><p><img src="https://picgo-1326755989.cos.ap-nanjing.myqcloud.com/pic/image-20250307233832525.png" alt="image-20250307233832525"></p><p>后面看了下做法，可以使用哈希表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-comment">// 键为nums的值，值为nums的键</span><br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; u_map;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;nums.<span class="hljs-built_in">size</span>() ; i++) &#123;<br>            <span class="hljs-comment">// find找不到就会返回end迭代器这个不可达值</span><br>            <span class="hljs-comment">// 进入if代表能找到</span><br>            <span class="hljs-type">int</span> temp = target - nums[i];<br>            <span class="hljs-keyword">if</span> (u_map.<span class="hljs-built_in">find</span>(temp) != u_map.<span class="hljs-built_in">end</span>()) &#123;<br>                <span class="hljs-keyword">return</span> &#123;i, u_map.<span class="hljs-built_in">at</span>(temp)&#125;;<br>            &#125; <span class="hljs-comment">// 这里主要是利用到了哈希表的超高查找速率</span><br><br>            <span class="hljs-comment">// 如果不存在，那么就将这个键值对存入到map</span><br>            u_map[nums[i]] = i;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/../../../../../.config/Typora/typora-user-images/image-20250307233854924.png" alt="image-20250307233854924"></p><p>很明显发现，再增加少数内存消耗的情况下能大幅增加运行速率</p>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/02/17/%E6%88%91%E7%9A%84%E5%86%85%E5%BF%83/"/>
    <url>/2025/02/17/%E6%88%91%E7%9A%84%E5%86%85%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<p>只是一个内心充满不甘的人。</p><p>不想埋没自己的才能。</p><p>个人计划：</p><p>在考研之余刷leetcode，把原来的安卓音视频播放器给做出来并完善好。</p><p>希望能将计算机考研408中有关的内容都与实际的工程或者招聘或者科研结合起来。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
