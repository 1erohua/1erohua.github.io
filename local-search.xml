<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2、两数相加</title>
    <link href="/2025/03/08/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/2_%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <url>/2025/03/08/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/2_%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="2、两数相加"><a href="#2、两数相加" class="headerlink" title="2、两数相加"></a>2、两数相加</h2><img src="https://picgo-1326755989.cos.ap-nanjing.myqcloud.com/pic/image-20250307234338707.png" alt="image-20250307234338707" style="zoom: 67%;" /><img src="https://picgo-1326755989.cos.ap-nanjing.myqcloud.com/pic/image-20250307234534945.png" alt="image-20250307234534945" style="zoom:50%;" /><p>这里特别需要注意的点其实就是 <strong>进位</strong>，它的逆序排序恰好方便了我们，链表最前面的是最低位，方便我们计算高位进位。</p><p>思路也很简单，一个进位的变量，同时遍历两个链表，并创建第三个链表的节点。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><img src="https://picgo-1326755989.cos.ap-nanjing.myqcloud.com/pic/image-20250313002416034.png" alt="image-20250313002416034" style="zoom:50%;" /><p>当时写的时候发现了几个问题：</p><blockquote><p>您的代码存在几个关键问题：</p><ol><li><strong>未初始化的指针</strong>：<code>returnList</code> 在第一次使用时未初始化，直接访问其 <code>val</code> 会导致未定义行为（如程序崩溃）。</li><li><strong>错误的返回指针</strong>：循环中移动了 <code>returnList</code>，最终返回的是链表的末尾节点而非头节点。</li><li><strong>未处理最后的进位</strong>：若循环结束后仍有进位，需额外添加节点。</li></ol></blockquote><p>代码在最下方，包括我自己写的更正后的以及AI简化后的</p><p>我自己总结一下：</p><ol><li>首先是指针没有初始化就直接访问 <code>returnList-&gt;val</code>，可能这段时间有点生疏了。<strong>代码不规范问题</strong></li><li>然后就是创建完整个链表后直接返回了尾指针。。。正常的做法应该是留一个头指针备用返回的</li><li>**个人觉得这是我算法层面的疏忽——补救也很简单，循环结束后加一段代码就ok了。**只是思考的时候完全没想到最后一轮循环进位的情况。。。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>更正之后的代码，不够简洁</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        ListNode *dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        ListNode *returnList = dummy;<br>        <span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(l1 != <span class="hljs-literal">nullptr</span> || l2 != <span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-comment">// 取出两个想加的值</span><br>            <span class="hljs-type">int</span> l1_num;<br>            <span class="hljs-type">int</span> l2_num;<br><br>            <span class="hljs-keyword">if</span>(l1 == <span class="hljs-literal">nullptr</span>)&#123;<br>                l1_num = <span class="hljs-number">0</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                l1_num = l1-&gt;val;<br>                l1 = l1-&gt;next;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(l2 == <span class="hljs-literal">nullptr</span>)&#123;<br>                l2_num = <span class="hljs-number">0</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                l2_num = l2-&gt;val;<br>                l2 = l2-&gt;next;<br>            &#125;<br><br>            <span class="hljs-type">int</span> add_end = (l1_num + l2_num + carry) % <span class="hljs-number">10</span>;<br>            carry = (l1_num + l2_num + carry)/<span class="hljs-number">10</span>;<br><br>            returnList-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(add_end);<br>            returnList = returnList-&gt;next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (carry &gt; <span class="hljs-number">0</span>) &#123;<br>            returnList-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(carry);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dummy-&gt;next;<br>    &#125;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><h3 id="简洁的代码"><a href="#简洁的代码" class="headerlink" title="简洁的代码"></a>简洁的代码</h3><p>简洁美是这个世界最伟大的东西</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        ListNode* dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 哑结点简化处理</span><br>        ListNode* current = dummy;<br>        <span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">while</span> (l1 || l2 || carry) &#123;<br>            <span class="hljs-type">int</span> n1 = l1 ? l1-&gt;val : <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> n2 = l2 ? l2-&gt;val : <span class="hljs-number">0</span>;<br>            <br>            <span class="hljs-type">int</span> sum = n1 + n2 + carry;<br>            carry = sum / <span class="hljs-number">10</span>;<br>            <br>            current-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>            current = current-&gt;next;<br>            <br>            <span class="hljs-keyword">if</span> (l1) l1 = l1-&gt;next;<br>            <span class="hljs-keyword">if</span> (l2) l2 = l2-&gt;next;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> dummy-&gt;next; <span class="hljs-comment">// 哑结点的next即真实头节点</span><br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1、两数之和</title>
    <link href="/2025/03/07/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2025/03/07/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/1_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、两数之和</h2><p><img src="https://picgo-1326755989.cos.ap-nanjing.myqcloud.com/pic/image-20250307233758271.png" alt="image-20250307233758271"></p><p>最先能想到的就是遍历循环，先定下数组中的一个值，再依次遍历其他元素进行 <code>target-nums[i]</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.<span class="hljs-built_in">size</span>(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[j] == target - nums[i]) &#123;<br>                    <span class="hljs-keyword">return</span> &#123;i, j&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>用自己的clion写就是舒服</p></blockquote><p>后面发现，为什么我的用时会这么慢：</p><p><img src="https://picgo-1326755989.cos.ap-nanjing.myqcloud.com/pic/image-20250307233832525.png" alt="image-20250307233832525"></p><p>后面看了下做法，可以使用哈希表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-comment">// 键为nums的值，值为nums的键</span><br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; u_map;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;nums.<span class="hljs-built_in">size</span>() ; i++) &#123;<br>            <span class="hljs-comment">// find找不到就会返回end迭代器这个不可达值</span><br>            <span class="hljs-comment">// 进入if代表能找到</span><br>            <span class="hljs-type">int</span> temp = target - nums[i];<br>            <span class="hljs-keyword">if</span> (u_map.<span class="hljs-built_in">find</span>(temp) != u_map.<span class="hljs-built_in">end</span>()) &#123;<br>                <span class="hljs-keyword">return</span> &#123;i, u_map.<span class="hljs-built_in">at</span>(temp)&#125;;<br>            &#125; <span class="hljs-comment">// 这里主要是利用到了哈希表的超高查找速率</span><br><br>            <span class="hljs-comment">// 如果不存在，那么就将这个键值对存入到map</span><br>            u_map[nums[i]] = i;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1326755989.cos.ap-nanjing.myqcloud.com/pic/image-20250307233854924.png" alt="image-20250307233854924"></p><p>很明显发现，再增加少数内存消耗的情况下能大幅增加运行速率</p>]]></content>
    
    
    <categories>
      
      <category>leetcode刷题记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
